{
	"info": {
		"_postman_id": "e76b658b-5421-4238-9e4b-46bea1d6a121",
		"name": "Restful Booker API Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47609789",
		"_collection_link": "https://neha-shende54-1080485.postman.co/workspace/4e8bbb96-54bf-41ae-85d2-d0e7378dce4b/collection/47609789-e76b658b-5421-4238-9e4b-46bea1d6a121?action=share&source=collection_link&creator=47609789"
	},
	"item": [
		{
			"name": "AUTH - Create Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Token received and saved to environment\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    if (jsonData.token) {\r",
							"        pm.environment.set(\"auth_token\", jsonData.token);\r",
							"        console.log(\"Authentication token saved: \" + jsonData.token.substring(0, 10) + \"...\");\r",
							"        \r",
							"        // Set token expiration (tokens typically expire after some time)\r",
							"        const expirationTime = new Date();\r",
							"        expirationTime.setHours(expirationTime.getHours() + 1); // Assume 1 hour expiration\r",
							"        pm.environment.set(\"token_expiration\", expirationTime.toISOString());\r",
							"    } else {\r",
							"        pm.test.skip(\"No token received - check credentials\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Response structure is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    \r",
							"    if (jsonData.token) {\r",
							"        pm.expect(jsonData.token).to.be.a('string');\r",
							"        pm.expect(jsonData.token.length).to.be.greaterThan(0);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				},
				"description": "Generated from cURL: curl -X POST  \n[https://restful-booker.herokuapp.com/auth](https://restful-booker.herokuapp.com/auth)  \n\\-H 'Content-Type: application/json'  \n\\-d '{  \n\"username\" : \"admin\",  \n\"password\" : \"password123\"  \n}'"
			},
			"response": []
		},
		{
			"name": "AUTH - Invalid Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// For Invalid Credentials Test\r",
							"pm.test(\"Invalid credentials should return 200 with reason\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reason');\r",
							"    pm.expect(jsonData.reason).to.eql('Bad credentials');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"invaliduser\", \"password\": \"password123\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUTH - Invalid Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// For Invalid Credentials Test\r",
							"pm.test(\"Invalid credentials should return 200 with reason\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reason');\r",
							"    pm.expect(jsonData.reason).to.eql('Bad credentials');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"admin\", \"password\": \"wrongpassword\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUTH - Empty Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// For Empty Credentials Test\r",
							"pm.test(\"Empty credentials should be rejected\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reason');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "AUTH - Missing Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// For Missing Fields Test\r",
							"pm.test(\"Missing username field should be rejected\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('reason');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"password\": \"password123\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Booking created successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('bookingid');\r",
							"    pm.expect(jsonData).to.have.property('booking');\r",
							"    pm.expect(jsonData.bookingid).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Booking contains all required fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var booking = jsonData.booking;\r",
							"    \r",
							"    pm.expect(booking).to.have.property('firstname');\r",
							"    pm.expect(booking).to.have.property('lastname');\r",
							"    pm.expect(booking).to.have.property('totalprice');\r",
							"    pm.expect(booking).to.have.property('depositpaid');\r",
							"    pm.expect(booking).to.have.property('bookingdates');\r",
							"    pm.expect(booking.bookingdates).to.have.property('checkin');\r",
							"    pm.expect(booking.bookingdates).to.have.property('checkout');\r",
							"});\r",
							"\r",
							"pm.test(\"Booking data matches request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var booking = jsonData.booking;\r",
							"    var requestBody = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(booking.firstname).to.eql(requestBody.firstname);\r",
							"    pm.expect(booking.lastname).to.eql(requestBody.lastname);\r",
							"    pm.expect(booking.totalprice).to.eql(requestBody.totalprice);\r",
							"    pm.expect(booking.depositpaid).to.eql(requestBody.depositpaid);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				},
				"description": "Generated from cURL: curl -X POST \\\n  https://restful-booker.herokuapp.com/booking \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}'"
			},
			"response": []
		},
		{
			"name": "Create booking with zero price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Booking created successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('bookingid');\r",
							"    pm.expect(jsonData).to.have.property('booking');\r",
							"    pm.expect(jsonData.bookingid).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Booking created with zero price fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var booking = jsonData.booking;\r",
							"    \r",
							"    pm.expect(booking).to.have.property('firstname');\r",
							"    pm.expect(booking).to.have.property('lastname');\r",
							"    pm.expect(booking).to.have.property('totalprice');\r",
							"    pm.expect(booking).to.have.property('depositpaid');\r",
							"    pm.expect(booking).to.have.property('bookingdates');\r",
							"    pm.expect(booking.bookingdates).to.have.property('checkin');\r",
							"    pm.expect(booking.bookingdates).to.have.property('checkout');\r",
							"});\r",
							"\r",
							"pm.test(\"Booking data matches request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var booking = jsonData.booking;\r",
							"    var requestBody = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(booking.firstname).to.eql(requestBody.firstname);\r",
							"    pm.expect(booking.lastname).to.eql(requestBody.lastname);\r",
							"    pm.expect(booking.totalprice).to.eql(requestBody.totalprice);\r",
							"    pm.expect(booking.depositpaid).to.eql(requestBody.depositpaid);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"firstname\": \"Zero\", \"lastname\": \"Price\", \"totalprice\": 0, \"depositpaid\": false, \"bookingdates\": {\"checkin\": \"2025-03-01\", \"checkout\": \"2025-03-05\"}}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create booking with minimum required fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Booking contains mandatory fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var booking = jsonData.booking;\r",
							"    \r",
							"    pm.expect(booking).to.have.property('firstname');\r",
							"    pm.expect(booking).to.have.property('lastname');\r",
							"    pm.expect(booking).to.have.property('totalprice');\r",
							"    pm.expect(booking).to.have.property('depositpaid');\r",
							"    pm.expect(booking).to.have.property('bookingdates');\r",
							"    pm.expect(booking.bookingdates).to.have.property('checkin');\r",
							"    pm.expect(booking.bookingdates).to.have.property('checkout');\r",
							"});\r",
							"\r",
							"pm.test(\"Booking data matches request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var booking = jsonData.booking;\r",
							"    var requestBody = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(booking.firstname).to.eql(requestBody.firstname);\r",
							"    pm.expect(booking.lastname).to.eql(requestBody.lastname);\r",
							"    pm.expect(booking.totalprice).to.eql(requestBody.totalprice);\r",
							"    pm.expect(booking.depositpaid).to.eql(requestBody.depositpaid);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"firstname\": \"Jane\", \"lastname\": \"Smith\", \"totalprice\": 100, \"depositpaid\": false, \"bookingdates\": {\"checkin\": \"2025-02-01\", \"checkout\": \"2025-02-05\"}}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create booking with invalid data types",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid data type should return 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Server error response should be handled\", function () {\r",
							"    if (pm.response.code === 500) {\r",
							"        console.log(\"Server returned 500 - Invalid data type detected\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"firstname\": 123, \"lastname\": true, \"totalprice\": \"invalid\", \"depositpaid\": \"yes\", \"bookingdates\": {\"checkin\": \"invalid-date\", \"checkout\": \"2025-01-20\"}}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create booking with missing required fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// For Missing Required Fields Test\r",
							"pm.test(\"Missing required field should return 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"firstname\": \"Incomplete\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create booking with invalid date format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// For Invalid Date Format Test\r",
							"// Request Body with invalid date format\r",
							"pm.test(\"Invalid date format should be rejected\", function () {\r",
							"    if (pm.response.code === 200) {\r",
							"        var jsonData = pm.response.json();\r",
							"        // Check if invalid date was accepted (this would be a bug)\r",
							"        console.log(\"WARNING: Invalid date format was accepted\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"firstname\": \"Date\", \"lastname\": \"Test\", \"totalprice\": 150, \"depositpaid\": true, \"bookingdates\": {\"checkin\": \"15-01-2025\", \"checkout\": \"20/01/2025\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create booking with checkout before checkin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create booking with checkout before checkin\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"firstname\": \"Logic\", \"lastname\": \"Error\", \"totalprice\": 150, \"depositpaid\": true, \"bookingdates\": {\"checkin\": \"2025-01-20\", \"checkout\": \"2025-01-15\"}}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch all Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains booking objects\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        pm.expect(jsonData[0]).to.have.property('bookingid');\r",
							"        pm.expect(jsonData[0].bookingid).to.be.a('number');\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"At least one booking exists\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				},
				"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking\n"
			},
			"response": []
		},
		{
			"name": "Retrieve specific booking by valid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/1053",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"1053"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve booking with non-existent ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Non-existent booking should return 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 response should be properly formatted\", function () {\r",
							"    if (pm.response.code === 404) {\r",
							"        pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/999999",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"999999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve booking with invalid ID format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// For Invalid Booking ID Format Test\r",
							"pm.test(\"Invalid booking ID format should return 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/abc123",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"abc123"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter bookings by guest name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// GET /booking?firstname=John\r",
							"pm.test(\"Filter by firstname works\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"    \r",
							"    if (jsonData.length > 0) {\r",
							"        console.log(\"Found \" + jsonData.length + \" bookings with specified firstname\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// GET /booking?lastname=Smith\r",
							"pm.test(\"Filter by lastname works\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking?firstname={Jim}&lastname={Brown}",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{Jim}"
						},
						{
							"key": "lastname",
							"value": "{Brown}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter bookings by date range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// GET /booking?checkin=2024-01-01\r",
							"pm.test(\"Filter by checkin date works\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"// GET /booking?checkout=2024-01-02\r",
							"pm.test(\"Filter by checkout date works\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking?checkin={2025-01-01}&checkout={2025-12-31}",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "{2025-01-01}"
						},
						{
							"key": "checkout",
							"value": "{2025-12-31}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Full booking update with Basic Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// PUT (FULL UPDATE) BOOKING - Test Scripts\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Full booking update successful\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('firstname');\r",
							"    pm.expect(jsonData).to.have.property('lastname');\r",
							"    pm.expect(jsonData).to.have.property('totalprice');\r",
							"    pm.expect(jsonData).to.have.property('depositpaid');\r",
							"    pm.expect(jsonData).to.have.property('bookingdates');\r",
							"});\r",
							"\r",
							"pm.test(\"All fields match the request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var requestBody = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(jsonData.firstname).to.eql(requestBody.firstname);\r",
							"    pm.expect(jsonData.lastname).to.eql(requestBody.lastname);\r",
							"    pm.expect(jsonData.totalprice).to.eql(requestBody.totalprice);\r",
							"    pm.expect(jsonData.depositpaid).to.eql(requestBody.depositpaid);\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(requestBody.bookingdates.checkin);\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(requestBody.bookingdates.checkout);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/3087",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"3087"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update booking without authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Forbidden\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/3087",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"3087"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-existent booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// For Non-existent Booking ID Test\r",
							"pm.test(\"Non-existent booking should return 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 response should be properly formatted\", function () {\r",
							"    if (pm.response.code === 404) {\r",
							"        pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/999999",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"999999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Partial Booking | Basic Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Booking updated successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('firstname');\r",
							"    pm.expect(jsonData).to.have.property('lastname');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated fields match request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var requestBody = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(jsonData.firstname).to.eql(requestBody.firstname);\r",
							"    pm.expect(jsonData.lastname).to.eql(requestBody.lastname);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Authorization header is present\", function () {\r",
							"    pm.expect(pm.request.headers.get(\"Authorization\")).to.include(\"Basic\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all booking fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('totalprice');\r",
							"    pm.expect(jsonData).to.have.property('depositpaid');\r",
							"    pm.expect(jsonData).to.have.property('bookingdates');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Check if token exists and is valid\r",
							"const token = pm.environment.get(\"auth_token\");\r",
							"const tokenExpiration = pm.environment.get(\"token_expiration\");\r",
							"\r",
							"if (!token || (tokenExpiration && new Date() > new Date(tokenExpiration))) {\r",
							"    console.log(\"Token missing or expired - will use collection pre-request script\");\r",
							"    // The collection pre-request script will handle authentication\r",
							"}\r",
							"\r",
							"// Set the cookie header if token exists\r",
							"if (token) {\r",
							"    pm.request.headers.add({\r",
							"        key: 'Cookie',\r",
							"        value: `token=${token}`\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{auth_token}}"
					},
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/3087",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"3087"
					]
				},
				"description": "Generated from cURL: curl -X PATCH \\\n  https://restful-booker.herokuapp.com/booking/1 \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cookie: token=abc123' \\\n  -d '{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\"\n}'"
			},
			"response": []
		},
		{
			"name": "Update Partial Booking Cookie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Booking updated successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('firstname');\r",
							"    pm.expect(jsonData).to.have.property('lastname');\r",
							"});\r",
							"\r",
							"pm.test(\"Updated fields match request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var requestBody = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(jsonData.firstname).to.eql(requestBody.firstname);\r",
							"    pm.expect(jsonData.lastname).to.eql(requestBody.lastname);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie header is present\", function () {\r",
							"    pm.expect(pm.request.headers.get(\"Cookie\")).to.include(\"token=\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response structure is valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.firstname).to.be.a('string');\r",
							"    pm.expect(jsonData.lastname).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=7635c4fe438cefa"
					},
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/526",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"526"
					]
				},
				"description": "Generated from cURL: curl -X PATCH \\\n  https://restful-booker.herokuapp.com/booking/1 \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cookie: token=abc123' \\\n  -d '{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\"\n}'"
			},
			"response": []
		},
		{
			"name": "Update only booking dates",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"bookingdates\": {\"checkin\": \"2025-03-01\", \"checkout\": \"2025-03-05\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/3087",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"3087"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete booking with valid authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created - API quirk)\", function () {\r",
							"    // Note: Restful Booker API returns 201 for successful DELETE\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Delete response should be 'Created'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Authentication header is present\", function () {\r",
							"    var cookieHeader = pm.request.headers.get(\"Cookie\");\r",
							"    var authHeader = pm.request.headers.get(\"Authorization\");\r",
							"    \r",
							"    var hasAuth = (cookieHeader && cookieHeader.includes(\"token=\")) || \r",
							"                  (authHeader && authHeader.includes(\"Basic\"));\r",
							"    \r",
							"    pm.expect(hasAuth).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Check if token exists and is valid\r",
							"const token = pm.environment.get(\"auth_token\");\r",
							"const tokenExpiration = pm.environment.get(\"token_expiration\");\r",
							"\r",
							"if (!token || (tokenExpiration && new Date() > new Date(tokenExpiration))) {\r",
							"    console.log(\"Token missing or expired - will use collection pre-request script\");\r",
							"    // The collection pre-request script will handle authentication\r",
							"}\r",
							"\r",
							"// Set the cookie header if token exists\r",
							"if (token) {\r",
							"    pm.request.headers.add({\r",
							"        key: 'Cookie',\r",
							"        value: `token=${token}`\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/53",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"53"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete booking without authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Check if token exists and is valid\r",
							"const token = pm.environment.get(\"auth_token\");\r",
							"const tokenExpiration = pm.environment.get(\"token_expiration\");\r",
							"\r",
							"if (!token || (tokenExpiration && new Date() > new Date(tokenExpiration))) {\r",
							"    console.log(\"Token missing or expired - will use collection pre-request script\");\r",
							"    // The collection pre-request script will handle authentication\r",
							"}\r",
							"\r",
							"// Set the cookie header if token exists\r",
							"if (token) {\r",
							"    pm.request.headers.add({\r",
							"        key: 'Cookie',\r",
							"        value: `token=${token}`\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/313",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"313"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "password123",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"// Auto-authentication function\r",
					"function authenticateIfNeeded() {\r",
					"    const currentToken = pm.environment.get(\"auth_token\");\r",
					"    \r",
					"    // Check if we need authentication for this request\r",
					"    const authRequiredEndpoints = [\r",
					"        '/booking/', // For PATCH, PUT, DELETE operations\r",
					"    ];\r",
					"    \r",
					"    const needsAuth = authRequiredEndpoints.some(endpoint => \r",
					"        pm.request.url.path.join('/').includes('booking/') && \r",
					"        ['PATCH', 'PUT', 'DELETE'].includes(pm.request.method)\r",
					"    );\r",
					"    \r",
					"    if (needsAuth && !currentToken) {\r",
					"        console.log(\"Authentication required - getting token...\");\r",
					"        \r",
					"        pm.sendRequest({\r",
					"            url: pm.environment.get(\"base_url\") + '/auth',\r",
					"            method: 'POST',\r",
					"            header: {\r",
					"                'Content-Type': 'application/json'\r",
					"            },\r",
					"            body: {\r",
					"                mode: 'raw',\r",
					"                raw: JSON.stringify({\r",
					"                    \"username\": pm.environment.get(\"username\") || \"admin\",\r",
					"                    \"password\": pm.environment.get(\"password\") || \"password123\"\r",
					"                })\r",
					"            }\r",
					"        }, function (err, response) {\r",
					"            if (!err && response.json().token) {\r",
					"                pm.environment.set(\"auth_token\", response.json().token);\r",
					"                console.log(\"Token obtained and saved\");\r",
					"            } else {\r",
					"                console.log(\"Failed to get authentication token\");\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"}\r",
					"\r",
					"// Run authentication check\r",
					"authenticateIfNeeded();"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	]
}